# for debugging the linesearch fail.


include("./helpers/data.jl")
include("./helpers/utils.jl")
include("./helpers/SH.jl")

include("./helpers/warping.jl")
include("./helpers/single_linkage.jl")

Random.seed!(25)

PyPlot.close("all")

########### fit,
shift_proportion = 0.9
w_ub = 10.0
f_tol = 0.0
x_tol = 0.0
g_tol = 1e-8
max_iters = 1000
max_time = Inf

setupwsolver = NMRFitModel.setupwsolver
UseGradientTrait = NMRSignalSimulator.UseGradientTrait
IgnoreGradientTrait = NMRSignalSimulator.IgnoreGradientTrait

## for one start.
p_initials = mergepoints(ps; tol = 1e-6)


N = NMRSignalSimulator.getNentries(MSS)
w = ones(N)
model_params = NMRSignalSimulator.MixtureModelParameters(MSS; w = w)
lbs, ubs = NMRSignalSimulator.fetchbounds(model_params, Bs; shift_proportion = shift_proportion)

f, df!, fdf!, BLS_params, C = setupfit(
    model_params,
    MSS,
    y_cost,
    U_cost;
    #w_lb = -0.1,
    w_lb = 0.0,
    w_ub = w_ub,
)

# #x_initial = generateparameters(lbs, ubs)
# x_initial = [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]
# grad_x = ones(length(p_initials[begin])) .* NaN
# @show norm(f(x_initial) - fdf!(grad_x, x_initial))

#@assert 1==2

# optimize.
# p_test = generateparameters(lbs, ubs)
# #p_test = p_initials[begin]

# # issue with Optim's line search here. slopes[ib] <= zeroT
grad_x = ones(length(p_initials[begin])) .* NaN
f = xx->fdf!(grad_x, xx)
df! = fdf!

# x_prev = [-186.67990452197432, -192.97423586959894, -133.9308684934743, -64.00162545558678, -64.00162545558678, -112.33909695892768, 25.9097461686315, -186.67990452197432, -133.9308684934743, -143.5816246780161, -112.33909695892768, -143.5816246780161, -162.1434786259133, -162.1434786259133, 16.970900411088564, 2.945243112740431, -2.552544031041707, -1.3744467859455345, -1.7671458676442586, -0.9817477042468106, 0.1963495408493623, -0.9817477042468106, 0.9817477042468106, -0.589048622548086, 2.945243112740431, -1.7671458676442586, 1.3744467859455343, 2.552544031041707, 0.1963495408493623, 0.9817477042468106, 0.6875, 1.5625, 0.5625]
# #f(x_prev)
# #df!(grad_x, x_prev)
# NMRSignalSimulator.importmodel!(model_params, x_prev)

# #x_initial = [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]
# w[:] = [0.00044294958381064706, 0.0, 0.19144061720213945]
# BLS_params.primal_initial[:] = w
# f(x_initial)
# df!(grad_x, x_initial)


# x = [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]
# df!(grad_x, x)
# i = 25
# p_initials[i] = [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]
# w = [0.00044294958381064706, 0.0, 0.19144061720213945]
# BLS_params.primal_initial = [0.00044294958381064706, 0.0, 0.19144061720213945]
# model_params.var_flat = [-186.67990452197432, -192.97423586959894, -133.9308684934743, -64.00162545558678, -64.00162545558678, -112.33909695892768, 25.9097461686315, -186.67990452197432, -133.9308684934743, -143.5816246780161, -112.33909695892768, -143.5816246780161, -162.1434786259133, -162.1434786259133, 16.970900411088564, 2.945243112740431, -2.552544031041707, -1.3744467859455345, -1.7671458676442586, -0.9817477042468106, 0.1963495408493623, -0.9817477042468106, 0.9817477042468106, -0.589048622548086, 2.945243112740431, -1.7671458676442586, 1.3744467859455343, 2.552544031041707, 0.1963495408493623, 0.9817477042468106, 0.6875, 1.5625, 0.5625]


# Iter     Function value   Gradient norm 
#      0     1.444323e+02     1.012935e-03
#  * Current step size: 1.0
#  * time: 0.00013303756713867188
#  * g(x): [-5.5013459080077675e-6, 5.8060377034665034e-6, 1.045116827313097e-5, -1.8186871732319046e-5, -1.859903322920204e-5, -8.714532815784101e-6, -1.6380988556205772e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.309575229652652e-21, -0.00011053703172578545, 6.749624310056697e-5, 2.5605830496042077e-5, -2.2322466868126777e-5, -0.0002968072120690052, 1.0868811948201943e-5, -0.00025028563454011587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.889073963725626e-19, -0.0010129352520536162, 0.0, -1.3325682193549813e-20]
#  * x: [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]

#import Optim

#x_initial = generateparameters(lbs, ubs)
x_initial = [84.85450205544288, 87.68511241772427, -92.63978643225556, 31.39123172088398, 31.39123172088398, -16.211506950060993, 54.72660288702855, 84.85450205544288, -92.63978643225556, 181.2841256140946, -16.211506950060993, 181.2841256140946, 127.77740247645545, 127.77740247645545, -254.56350616632864, -0.1963495408493623, 0.589048622548086, 1.7671458676442588, 1.3744467859455343, 2.1598449493429825, -2.945243112740431, 2.1598449493429825, -2.1598449493429825, 2.552544031041707, -0.1963495408493623, 1.3744467859455343, -1.7671458676442586, -0.589048622548086, -2.945243112740431, -2.1598449493429825, 1.6875, 0.5625, 1.5625]
gx = [-5.5013459080077675e-6, 5.8060377034665034e-6, 1.045116827313097e-5, -1.8186871732319046e-5, -1.859903322920204e-5, -8.714532815784101e-6, -1.6380988556205772e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.309575229652652e-21, -0.00011053703172578545, 6.749624310056697e-5, 2.5605830496042077e-5, -2.2322466868126777e-5, -0.0002968072120690052, 1.0868811948201943e-5, -0.00025028563454011587, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.889073963725626e-19, -0.0010129352520536162, 0.0, -1.3325682193549813e-20]
NMRSignalSimulator.importmodel!(model_params, x_initial)
f(x_initial)
df!(grad_x, x_initial)

#fill!(w, 1.0) # sanity check. see if it gets overwritten after the fit. it should be, by BLS.

# @show f(x_initial)
# @show grad_x
# @show w
# @assert 1==2

x_star, df_x_star_norm, status, iters_ran = NMRFitModel.runOptimjl(
    x_initial,
    f,
    df!,
    g_tol;
    x_tol = x_tol,
    f_tol = f_tol,
    max_time = max_time,
    max_iters = max_iters,
    lp = 2,
    show_trace = false,
    verbose = true,
)
@show x_star

@assert 1==2

grad_x0 = ones(length(x_initial)) .* NaN
cost_x0 = fdf!(grad_x0, x_initial)

grad_x = ones(length(x_initial)) .* NaN
cost_x_star = fdf!(grad_x, x_star)

println("sanity checks for f(x_star) and df(x_star). Passed?")
@show abs(f(x_star) - cost_x_star) < 1e-12
@show abs(norm(grad_x) - df_x_star_norm) < 1e-12
println()

println("initial vs. final iterates:")
@show f(x_initial), cost_x_star

### the p_initial[2] case is fishy. interpolation/extrapolation problem?
x_star_cg = copy(x_star)

#### diagnose.

x_star_PO, status, iters_ran = runOptimjlParticleSwarm(
    x_initial,
    f,
    lbs,
    ubs;
    x_tol = x_tol,
    f_tol = f_tol,
    max_time = max_time,
    #max_iters = 1000,
    max_iters = 1,
    verbose = true,
)

println("PO solution, CG solution, zero solution")
@show f(x_star_PO), f(x_star_cg), norm(y)^2

# force run the solution iterate.
f(x_star_PO)
w_one = ones(length(As))

q = uu->NMRSignalSimulator.evalclproxymixture(uu, As, Bs; w = w_one)

U_rad = U_y .* (2*Ï€)
q_U = q.(U_rad)

PyPlot.figure(fig_num)
fig_num += 1

PyPlot.plot(P_y, real.(y), label = "data")
PyPlot.plot(P_cost, real.(y_cost), "x", label = "fit positions")
PyPlot.plot(P_y, real.(q_U), label = "fit solution")


PyPlot.legend()
PyPlot.xlabel("ppm")
PyPlot.ylabel("real")
PyPlot.title("data vs. PO fit, real part")
